CREATE TABLE TB_AUX (ID INT, NAME VARCHAR(100));

CREATE TABLE TB_OP (OPERACAO VARCHAR (100));

CREATE OR REPLACE FUNCTION ft_teste()
RETURNS trigger AS
$BODY$
BEGIN
	INSERT INTO TB_OP VALUES(TG_OP);
	RETURN NEW;
END;
$BODY$
LANGUAGE 'plpgsql';

CREATE TRIGGER BEF_ROW BEFORE INSERT ON TB_AUX
FOR EACH ROW
	EXECUTE PROCEDURE ft_teste();
	

DROP TRIGGER BEF_ROW ON TB_AUX;


CREATE OR REPLACE FUNCTION ft_tr_statement()
RETURNS trigger AS
$BODY$
BEGIN
   INSERT INTO TB_OP VALUES(TG_OP 
                           || '-' || TG_WHEN 
                           || '-' || TG_TABLE_NAME);
    RETURN NEW;
END;
$BODY$
LANGUAGE 'plpgsql';



CREATE TRIGGER BEF_STA BEFORE INSERT OR UPDATE OR DELETE
ON  TB_AUX
FOR EACH STATEMENT
	EXECUTE PROCEDURE ft_tr_statement();

	
INSERT INTO TB_AUX VALUES(1,'A');

SELECT * FROM TB_OP;

DROP TRIGGER BEF_STA ON TB_AUX;


CREATE OR REPLACE FUNCTION ft_tr_old_new()
RETURNS trigger AS $BODY$
BEGIN
	IF(TG_OP = 'INSERT') THEN
		INSERT INTO TB_OP VALUES('NOVO NOME: '|| NEW.NAME);
	END IF;
	IF (TG_OP = 'UPDATE') THEN
		INSERT INTO TB_OP VALUES ('NOME ANTIGO: ' || OLD.NAME
								 || ' NOME NOVO: ' || NEW.NAME);
	END IF;
	IF(TG_OP = 'DELETE') THEN
		INSERT INTO TB_OP VALUES ('NOME REMOVIDO: ' || OLD.NAME);
	END IF;
	RETURN NEW;
	END;
	$BODY$
	LANGUAGE 'plpgsql';
	
CREATE TRIGGER AFT_ROW AFTER INSERT OR UPDATE OR DELETE ON TB_AUX
FOR EACH ROW
	EXECUTE PROCEDURE ft_tr_old_new();
	
INSERT INTO TB_AUX VALUES(1,'A');
DELETE FROM TB_AUX;
DELETE FROM TB_OP;
UPDATE TB_AUX SET NAME = 'C';


SELECT * FROM TB_AUX;
SELECT * FROM TB_OP;

DROP TRIGGER AFT_ROW ON TB_AUX;

CREATE OR REPLACE VIEW VW_AUX AS SELECT * FROM TB_AUX;

CREATE OR REPLACE FUNCTION ft_insteadof()
RETURNS trigger AS
$BODY$
BEGIN 
	INSERT INTO TB_AUX VALUES(NEW.ID,NEW.NAME||'_X');
	
	RETURN NEW;
END;
$BODY$
LANGUAGE 'plpgsql';

CREATE TRIGGER TR_IO INSTEAD OF INSERT ON VW_AUX
FOR EACH ROW
	EXECUTE PROCEDURE ft_insteadof();
	
	
SELECT * FROM VW_AUX;
SELECT * FROM TB_AUX;

INSERT INTO VW_AUX VALUES (99,'TOPPPEN');
	
	

	
	
